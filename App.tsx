
import React, { useState, useEffect } from 'react';
import ImageUploader from './components/ImageUploader';
import GeneratedImageGallery from './components/GeneratedImageGallery';
import { generateImageVariations } from './services/geminiService';
import { downloadBrandedAlbum, computePalette, createDefaultPalette } from './services/zipService';
import type { BatchCallbackPayload, ImageItem, AlbumOptions, BrandInfo, Palette, Typography } from './types';
import { LogoIcon, SparklesIcon, DownloadIcon, EyeIcon } from './components/icons';
import ProgressBar from './components/ProgressBar';
import VariationSlider from './components/VariationSlider';
import AlbumPreviewModal from './components/AlbumPreviewModal';

// Custom hook for persisting state to localStorage, included here to avoid creating new files.
function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T | ((val: T) => T)) => void] {
    const [storedValue, setStoredValue] = useState<T>(() => {
        try {
            const item = window.localStorage.getItem(key);
            return item ? JSON.parse(item) : initialValue;
        } catch (error) {
            console.error(error);
            return initialValue;
        }
    });

    const setValue = (value: T | ((val: T) => T)) => {
        try {
            const valueToStore = value instanceof Function ? value(storedValue) : value;
            setStoredValue(valueToStore);
            window.localStorage.setItem(key, JSON.stringify(valueToStore));
        } catch (error) {
            console.error(error);
        }
    };
    
    return [storedValue, setValue];
}

const App: React.FC = () => {
  const [sourceImage, setSourceImage] = useState<string | null>(null);
  const [sourceMimeType, setSourceMimeType] = useState<string | null>(null);
  const [generatedImages, setGeneratedImages] = useState<ImageItem[]>([]);
  const [failures, setFailures] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [showAlbumEditor, setShowAlbumEditor] = useState<boolean>(false);
  const [numVariations, setNumVariations] = useState<number>(5);
  const [progress, setProgress] = useState({ current: 0, total: 5 });
  const [statusMessage, setStatusMessage] = useState<string>('');

  const defaultAlbumOptions: AlbumOptions = {
    brandInfo: {
        name: 'Product Image Collection',
        slogan: 'AI-Generated Variations',
        logoSrc: null,
        footerText: 'Generated by Ferrer Studio',
    },
    palette: createDefaultPalette(),
    typography: {
        titleFont: 'Inter, sans-serif',
        bodyFont: 'Inter, sans-serif',
    },
    showWatermark: false,
    watermarkOpacity: 0.7,
    imageAspectRatio: 'auto',
    imageFit: 'contain',
  };

  const [albumOptions, setAlbumOptions] = useLocalStorage<AlbumOptions>('albumBrandingOptions', defaultAlbumOptions);

  const handleImageUpload = (file: File) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      setSourceImage(reader.result as string);
      setSourceMimeType(file.type);
      setGeneratedImages([]);
      setFailures([]);
      setProgress({ current: 0, total: numVariations });
      setStatusMessage('');
    };
    reader.readAsDataURL(file);
  };

  const handleGeneration = async () => {
    if (!sourceImage || !sourceMimeType) return;

    setIsLoading(true);
    setGeneratedImages([]);
    setFailures([]);
    setProgress({ current: 0, total: numVariations });
    setStatusMessage('Initializing generation...');

    const onBatchComplete = (result: BatchCallbackPayload) => {
        setGeneratedImages(prev => [
            ...prev, 
            ...result.successes.map((src, i) => ({
                id: `img-${prev.length + i + 1}`,
                src,
                label: `Variation ${prev.length + i + 1}`
            }))
        ]);
        setFailures(prev => [...prev, ...result.failures]);
        setProgress(prev => ({ ...prev, current: prev.current + result.successes.length + result.failures.length }));
        setStatusMessage(`Processing... Batch complete.`);
    };

    try {
      await generateImageVariations(sourceImage, sourceMimeType, numVariations, onBatchComplete);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
      setFailures(prev => [...prev, `A critical error stopped the process: ${errorMessage}`]);
    } finally {
      setIsLoading(false);
      setStatusMessage('Generation complete!');
    }
  };

  const handleImageReorder = (reorderedImages: ImageItem[]) => {
    setGeneratedImages(reorderedImages);
  };

  const resetState = () => {
    setSourceImage(null);
    setSourceMimeType(null);
    setGeneratedImages([]);
    setFailures([]);
    setIsLoading(false);
    setNumVariations(5);
    setProgress({ current: 0, total: 5 });
    setStatusMessage('');
  };

  const getGenerateButtonText = () => {
    if (isLoading) return 'Generating...';
    if (numVariations === 1) return 'Generate 1 Variation';
    return `Generate ${numVariations} Variations`;
  };

  const allImagesForAlbum: ImageItem[] = sourceImage ? [{ id: 'original', src: sourceImage, label: 'Original' }, ...generatedImages] : [];

  return (
    <div className="min-h-screen bg-slate-900 text-slate-100 font-sans p-4 sm:p-6 lg:p-8">
      <div className="max-w-7xl mx-auto">
        <header className="flex items-center justify-between mb-6 md:mb-10">
          <div className="flex items-center gap-3">
            <LogoIcon />
            <h1 className="text-xl sm:text-2xl font-bold text-white tracking-tight">Product Shot Generator</h1>
          </div>
        </header>

        <main>
          {!sourceImage ? (
            <div className="text-center max-w-3xl mx-auto">
                <div className="inline-flex items-center justify-center bg-blue-600/10 text-blue-400 rounded-full px-4 py-1 mb-6">
                  <SparklesIcon className="w-5 h-5 mr-2" />
                  <span>Powered by Gemini AI</span>
                </div>
                <h2 className="text-4xl font-extrabold tracking-tight text-white sm:text-6xl mb-5">
                  Create Professional Product Shots in Seconds
                </h2>
                <p className="text-lg text-slate-400 mb-10">
                  Upload a single image and our AI will generate a complete set of studio-lit photos from multiple angles.
                </p>
                <ImageUploader onImageUpload={handleImageUpload} />
            </div>
          ) : (
            <div className="flex flex-col lg:flex-row gap-8 lg:gap-12">
              {/* --- Control Panel (Left) --- */}
              <aside className="lg:w-1/3 xl:w-1/4">
                <div className="sticky top-8 space-y-6">
                  <div>
                    <h3 className="text-lg font-semibold mb-3 text-slate-200">Reference Image</h3>
                    <div className="aspect-square bg-slate-800 rounded-xl overflow-hidden ring-2 ring-slate-700">
                      <img src={sourceImage} alt="Source Product" className="w-full h-full object-cover" />
                    </div>
                  </div>
                  
                  <div className="bg-slate-800/50 p-5 rounded-xl border border-slate-700 space-y-5">
                      <VariationSlider
                        label="Number of Variations"
                        value={numVariations}
                        onChange={(e) => setNumVariations(parseInt(e.target.value, 10))}
                        min={1}
                        max={10}
                        disabled={isLoading}
                      />
                      <button
                          onClick={handleGeneration}
                          disabled={isLoading}
                          className="w-full flex items-center justify-center gap-2.5 bg-blue-600 text-white font-semibold py-3 px-4 rounded-lg hover:bg-blue-500 transition-all duration-200 transform hover:scale-[1.02] disabled:bg-slate-700 disabled:text-slate-400 disabled:cursor-not-allowed disabled:scale-100"
                      >
                          <SparklesIcon />
                          {getGenerateButtonText()}
                      </button>
                  </div>
                  
                  <div className="space-y-3">
                    {generatedImages.length > 0 && !isLoading && (
                        <>
                           <button
                              onClick={() => setShowAlbumEditor(true)}
                              className="w-full flex items-center justify-center gap-2.5 bg-transparent border border-slate-600 text-slate-200 font-semibold py-3 px-4 rounded-lg hover:bg-slate-700 transition-colors disabled:bg-slate-800 disabled:border-slate-700 disabled:text-slate-400 disabled:cursor-not-allowed"
                            >
                                <EyeIcon />
                                Customize & Export Album
                            </button>
                        </>
                      )}
                      <button
                          onClick={resetState}
                          disabled={isLoading}
                          className="w-full bg-slate-700/50 text-slate-300 font-medium py-3 px-4 rounded-lg hover:bg-slate-700 transition-colors disabled:opacity-50"
                      >
                          Upload Another Image
                      </button>
                  </div>
                </div>
              </aside>

              {/* --- Image Gallery (Right) --- */}
              <div className="lg:w-2/3 xl:w-3/4">
                  <h3 className="text-lg font-semibold mb-4 text-slate-200">Generated Variations</h3>
                  {isLoading && (
                      <div className="w-full bg-slate-800 p-6 rounded-xl mb-6">
                         <ProgressBar current={progress.current} total={progress.total} />
                         <p className="text-center text-slate-400 mt-3 text-sm">{statusMessage} ({progress.current}/{progress.total})</p>
                      </div>
                  )}
                 
                  <GeneratedImageGallery 
                    images={generatedImages}
                    onReorder={handleImageReorder}
                    isLoading={isLoading} 
                    totalToGenerate={numVariations}
                  />
                   {failures.length > 0 && (
                      <div className="mt-6 bg-red-900/20 border border-red-500/30 text-red-300 rounded-xl p-4">
                        <h4 className="font-semibold mb-2">Failure Report</h4>
                        <ul className="list-disc list-inside text-sm space-y-1">
                          {failures.map((fail, index) => <li key={index}>{fail}</li>)}
                        </ul>
                      </div>
                    )}
              </div>
            </div>
          )}
        </main>
      </div>

      {showAlbumEditor && (
        <AlbumPreviewModal
          images={allImagesForAlbum}
          initialOptions={albumOptions}
          onOptionsChange={setAlbumOptions}
          onClose={() => setShowAlbumEditor(false)}
        />
      )}
    </div>
  );
};

export default App;
